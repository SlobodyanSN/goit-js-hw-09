{"mappings":"gfAAAA,EAAA,SAYC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,OAAOC,OAAOC,OAAQH,GAAK,GACzBC,OAAOG,MAAMD,OAASF,OAAOI,KAAKF,YARjCG,KAAKC,UAS1BC,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALL,MACjBQ,OAAOC,QAAQ,qCAAgEC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,IAEtFI,OAAM,SAAAN,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALL,MAClBQ,OAAOI,QAAQ,wBAAuCF,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\n for (let i = 0; i < Number(amount.value); i += 1) {\n  createPromise(i + 1, Number(delay.value) + Number(step.value) * i)\n  .then(({ position, delay }) => {\n    Notify.success(`:белая_галочка: Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notify.failure(`:х: Rejected promise ${position} in ${delay}ms`);\n  });\n};"],"names":["parcelRequire","$ce04d3a99e08e73b$var$i","Number","amount","value","delay","step","Math","random","then","param","position","_$delay","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.2437654b.js.map"}